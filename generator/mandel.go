package generator

import (
	"fmt"
	"image"
	"image/color"
	"time"

	"github.com/0x0f0f0f/tripbot9000/util"
	"github.com/karlek/vanilj/canvas"
	"github.com/karlek/vanilj/fractal"
	"github.com/karlek/vanilj/fractal/mandel"
	"gonum.org/v1/plot/vg"
	// "math"
)

type Location struct {
	X float64
	Y float64
}

var locations = []Location{
	{-1.769383179195515018213847286085473782905747263654751437465528216527895619319611191987887653894342701686468599663406934835984123454028053966872660266514595434811793194196363573302709682793695943146714716774002031919065020512659244853735026203310097693791992217030952111815848133482766831104610834983683818312471357751511964121816244219318023485118638666083722365040664254867074683654013015647258306150454564116791483210267781084732430107676079087748369933418914710721955770861925845172959445482333203269525299802359134204528070300441273296202514399300300295833144642522212561596258328029290919911158134003386379705091288237920953499024380913680513871512368411187820615517867601304758195905610284272799932928430918358605799109983971606502824677529924154291921315015305412213104688127397427900716330535760342827838007563501470683376851979682461188231312557396189771618162083272675065421105497587089480320858567022680527745218818472156630048815028139547259136263126046753041127795232821142795073229191744273096953663087561117520098357871045992896473296506796597597442697265155674929747488222847643986370481000300,
		},
	{0.360240443437614363236125244449545308482607807958585750488375814740195346059218100311752936722773426396233731729724987737320035372683285317664532401218521579554288661726564324134702299962817029213329980895208036363104546639698106204384566555001322985619004717862781192694046362748742863016467354574422779443226982622356594130430232458472420816652623492974891730419252651127672782407292315574480207005828774566475024380960675386215814315654794021855269375824443853463117354448779647099224311848192893972572398662626725254769950976527431277402440752868498588785436705371093442460696090720654908973712759963732914849861213100695402602927267843779747314419332179148608587129105289166676461292845685734536033692577618496925170576714796693411776794742904333484665301628662532967079174729170714156810530598764525260869731233845987202037712637770582084286587072766838497865108477149114659838883818795374195150936369987302574377608649625020864292915913378927790344097552591919409137354459097560040374880346637533711271919419723135538377394364882968994646845930838049998854075817859391340445151448381853615103761584177161812057928,
		-0.6413130610648031748603750151793020665794949522823052595561775430644485741727536902556370230689681162370740565537072149790106973211105273740851993394803287437606238596262287731075999483940467161288840614581091294325709988992269165007394305732683208318834672366947550710920088501655704252385244481168836426277052232593412981472237968353661477793530336607247738951625817755401065045362273039788332245567345061665756708689359294516668271440525273653083717877701237756144214394870245598590883973716531691124286669552803640414068523325276808909040317617092683826521501539932397262012011082098721944643118695001226048977430038509470101715555439047884752058334804891389685530946112621573416582482926221804767466258346014417934356149837352092608891639072745930639364693513216719114523328990690069588676087923656657656023794484324797546024248328156586471662631008741349069961493817600100133439721557969263221185095951241491408756751582471307537382827924073746760884081704887902040036056611401378785952452105099242499241003208013460878442953408648178692353788153787229940221611731034405203519945313911627314900851851072122990492499999999999999999991},
	{-0.751095959125087, -0.116817186889238},
	{-0.812223315621338, -0.185453926110785},
}

func RenderMandelbrot(
	filename string,
	width, height int,
	centerReal,
	centerImag,
	iterations,
	zoom float64) *image.RGBA {
	c := canvas.NewCanvas(width, height)

	fmt.Printf("center: %f\niter: %f, zoom: %f\n", complex(centerReal, centerImag), iterations, zoom)

	ticker := time.NewTicker(500 * time.Millisecond)
	done := make(chan bool)

	go func() {
		for {
			select {
			case <-done:
				fmt.Printf("\n")
				return
			case <-ticker.C:
				fmt.Printf(".")
			}
		}
	}()
	for x := 0; x < c.Bounds().Size().X; x++ {
		for y := 0; y < c.Bounds().Size().Y; y++ {
			c.Set(x, y, color.RGBA{0, 0, 0, 255})
		}
	}

	// f := fractal.Fractal{
	// 	Src:    c.RGBA,
	// 	Iter:   iterations,
	// 	Center: complex(centerReal, centerImag),
	// 	Zoom:   zoom,
	// }
	// mandel.Smooth(&f)
	mandel.Draw(c.RGBA, zoom,
		complex(centerReal, centerImag), iterations,
		// fractal.PedagogicalGradient)
		fractal.NewRandomGradient(iterations))
	ticker.Stop()
	done <- true

	return c.RGBA
}

func RandomMandelbrot(filename string, w, h vg.Length, dpi int) *image.RGBA {
	img_w_px := w.Dots(float64(dpi))
	img_h_px := h.Dots(float64(dpi))
	location := locations[util.RandInt(0, len(locations))]
	return RenderMandelbrot(filename,
		// 1920, 1080,
		int(img_w_px), int(img_h_px),
		// RandFloat(0.0, 3.0), RandFloat(0.0, 3.0),
		location.X, location.Y,
		1000,
		// float64(RandInt(500, 1000)),
		util.RandFloat(100.0, 10000.0))
	// float64(RandInt(500, 1000)))

}
